# Change pip's cache directory to be inside the project directory since we can
# only cache local items.
variables:
  PIP_CACHE_DIR: "$CI_PROJECT_DIR/.cache/pip"

# Pip's cache doesn't store the python packages
# https://pip.pypa.io/en/stable/topics/caching/
#
# If you want to also cache the installed packages, you have to install
# them in a virtualenv and cache it as well.
cache:
  key: ${CI_COMMIT_REF_SLUG}
  paths:
    - .cache/pip
    - venv/

# Install package for all jobs (unless inherit is false)
default:
  before_script:
    - python --version  # For debugging
    - uname -a          # For debugging
    - cat /etc/os-release    # For debugging
    - gcc --version
    - pip install virtualenv
    - virtualenv venv
    - source venv/bin/activate
    - apt update
    - apt -y install r-base  # needed for rpy2 install
    - pip install rpy2   # resolve dependencies for diffexpr
    - pip install numpy  # resolve dependencies for diffexpr
    - pip install pandas # resolve dependencies for diffexpr
    - pip install .[all]

# This is a a rule that always passes for branches without jobs being run - otherwise some branches cannot be merged
pass:
  inherit:
    default: false
  script:
     - 'echo passed'
  rules:
    - if: $CI_PIPELINE_SOURCE == "merge_request_event" # all MR

# check style of the docstrings
# D202 = No blank lines allowed after function docstring
docstyle:
  image: 
    name: python:latest
    entrypoint: [ '/bin/bash', '-c', 'ln -snf /bin/bash /bin/sh && /bin/bash -c $0' ]  # Fixes shell not found error (See Issue #129)
  inherit:
    default: false # do not inherit before_script
  stage: test
  tags:
    - coverage
  script:
    - pip install pydocstyle
    - pydocstyle --convention numpy --explain --source --match-dir '((?!data)|[^\.]).*' --add-ignore=D202 setup.py sctoolbox  # exclude dirs starting with "data" or "."
  allow_failure: false
  rules:
    - if: $CI_PIPELINE_SOURCE == "merge_request_event" # all MR
      changes:
      - setup.py
      - tests/*.py
      - sctoolbox/*.py

# lint code and docstrings
# flake8 ignore rules:
# E501 = Line too long
# W503 = Line break occurred before a binary operator
# D202 = No blank lines allowed after function docstring
# DOC301 = __init__() should not have a docstring; <- conflicts with "D107 Missing docstring in __init__"
lint:
  image: 
    name: python:3.10 # pybedtools is not compatible with python 3.11
    entrypoint: [ '/bin/bash', '-c', 'ln -snf /bin/bash /bin/sh && /bin/bash -c $0' ]  # Fixes shell not found error (See Issue #129)
  inherit:
    default: false # do not inherit before_script
  stage: test
  tags:
    - coverage
  script:
    - pip install flake8
    - pip install pydoclint
    - flake8 sctoolbox setup.py tests --ignore=E501,W503,D202,DOC301 --arg-type-hints-in-signature False --extend-exclude=sctoolbox/__init__.py,sctoolbox/data,tests/data
  allow_failure: false
  rules:
    - if: $CI_PIPELINE_SOURCE == "merge_request_event" # all MR
      changes:
      - setup.py
      - tests/*.py
      - sctoolbox/*.py

# Test that the minimal sctoolbox package can still be imported without additional dependencies
test import:
  image: python:3.10  # pybedtools is not compatible with python 3.11
  inherit:
      default: false # do not inherit before_script
  stage: test
  script:
    - pip install .
    - python -c "import sctoolbox"
  rules:
    - if: $CI_PIPELINE_SOURCE == "merge_request_event"
      changes:
        - setup.py
        - sctoolbox/*.py

# Run test coverage
test coverage:
  stage: test
  image: 
    name: python:3.10
    entrypoint: [ '/bin/bash', '-c', 'ln -snf /bin/bash /bin/sh && /bin/bash -c $0' ] # Fixes shell not found error (See Issue #129)
  tags:
    - coverage
  coverage: '/TOTAL.*\s(\d*.\d*\%)/'
  script:
    - apt-get install bedtools  #needed for some tests
    - chmod +x scripts/bedGraphToBigWig  # make script executable
    - pip install pytest
    - pip install pytest-cov
    - pip install pytest-html
    - pytest --cov-report=term --cov=./sctoolbox . --junitxml=pytest.xml --cov-report html:htmlcov --html=pytest.html --durations=0  # durations=0 shows the ranked duration of all tests for improving compute time
  artifacts:
    when: always
    paths:
      - pytest.xml
      - pytest.html
      - htmlcov
    reports:
      junit: pytest.xml
  rules:
    - if: $CI_COMMIT_BRANCH == "dev" # commits to dev (for coverage)
      changes:
      - tests/*.py
      - sctoolbox/*.py
    - if: $CI_COMMIT_BRANCH != "dev" && $CI_PIPELINE_SOURCE == "merge_request_event"  #all merge requests with changes
      changes:
      - tests/*.py
      - sctoolbox/*.py    
    - when: manual
      allow_failure: True

#Changes.rst file must be changed in merge requests
check_changes:
  image:
    name: alpine/git:latest
    entrypoint: [""]  #hack from https://gitlab.com/gitlab-org/gitlab-runner/-/issues/4027
  inherit:
    default: false
  script:
    - git fetch origin $CI_MERGE_REQUEST_TARGET_BRANCH_NAME
    - git diff-tree --name-only -r "HEAD..origin/$CI_MERGE_REQUEST_TARGET_BRANCH_NAME" > changed_files.txt
    - cat changed_files.txt
    - if grep -q "CHANGES.rst" changed_files.txt; then echo "The 'CHANGES.rst' file was changed."; else echo "The 'CHANGES.rst' file must be changed for merge requests!"; exit 1; fi
  rules:
    - if: $CI_PIPELINE_SOURCE == "merge_request_event" # all MR

#In addition to CHANGES.rst, the _version.py file must be changed in merge requests to main in order to make a new version
check_version:
  image:
    name: alpine/git:latest
    entrypoint: [""]  #hack from https://gitlab.com/gitlab-org/gitlab-runner/-/issues/4027
  inherit:
    default: false
  script:
    - git fetch origin $CI_MERGE_REQUEST_TARGET_BRANCH_NAME
    - git diff-tree --name-only -r "HEAD..origin/$CI_MERGE_REQUEST_TARGET_BRANCH_NAME" > changed_files.txt
    - cat changed_files.txt
    - if grep -q "sctoolbox/_version.py" changed_files.txt; then echo "The 'sctoolbox/_version.py' file was changed."; else echo "The 'sctoolbox/_version.py' file must be changed for merge requests to main!"; exit 1; fi
  rules:
    - if: $CI_MERGE_REQUEST_TARGET_BRANCH_NAME == "main" # only on MR to main

# ------------------------ Tests for notebooks in repo -----------------------#

# test if notebooks contain output; these should be removed using the .gitconfig addition given in the README
notebook-output-check:
  image: python:3.10
  inherit:
    default: false
  stage: test
  script:
    - python --version
    - python scripts/check_notebooks.py */*.ipynb
  rules:
    - if: $CI_PIPELINE_SOURCE == "merge_request_event" # all MR

# Test notebooks when code is pushed to main
notebooks:
  image: mambaorg/micromamba:latest
  inherit:
    default: false
  stage: test
  #tags:
  #  - gwdg
  #  - gwdg-shared
  artifacts:
    paths:
      - rna-notebooks/pipeline_output/logs/*.txt
  script:
    - micromamba env create -f sctoolbox_env.yml #mamba is faster at creating envs than conda
    - eval "$(micromamba shell hook --shell bash)" # initialize micromamba in the current shell
    - micromamba activate sctoolbox
    - micromamba install -c conda-forge git # needed for sctoolbox install
    - pip install papermill
    - pip install .[all]
    - python -m ipykernel install --user --name sctoolbox
    - which python             # for debug
    - which pip                # for debug
    - which python3            # for debug
    - which papermill          # for debug
    - python -c "import sys; print(sys.path)" # for debug
    - jupyter kernelspec list  # for debug
    - python scripts/run_notebooks.py
  after_script:
    - pwd
    - ls -l rna-notebooks/pipeline_output/logs/
    - for f in rna-notebooks/pipeline_output/logs/*; do echo $f; cat $f; done

  rules:
    - if: $CI_MERGE_REQUEST_TARGET_BRANCH_NAME == "main" # only on MR to main
      when: manual  # manual trigger
      allow_failure: True  # Currently allowed to fail while we solve issues with the automatic notebook runs
    - if: $CI_MERGE_REQUEST_TARGET_BRANCH_NAME != "main" # for all other pushes, you can manually trigger the notebooks
      when: manual
      allow_failure: True  # the manual rule is allowed to fail


# ----------------------------- Gitlab pages ---------------------------------#

# Build documentation
build-pages:
  image: python:3.10
  stage: deploy
  script:
    - apt-get update -qq && apt-get install -qq -y pandoc  # system install of pandoc is needed
    - pip install sphinx sphinx-rtd-theme
    - pip install nbsphinx
    - pip install nbsphinx_link
    - cd docs
    - make html
  artifacts:
    paths:
      - docs/build/html/
  rules:
    - if: $CI_COMMIT_BRANCH == "main" # always for commits to main
    - if: $CI_COMMIT_BRANCH == "dev"  # always for commits to dev
    - if: $CI_MERGE_REQUEST_SOURCE_BRANCH_NAME == "dev"
      when: never   # but not again for any merge requests coming from dev
    - when: manual  # otherwise manual
      allow_failure: True  # manual is not required

# Deploy pages for a MR - needs to be separate from deploy-pages-commit due to 
# $CI_MERGE_REQUEST_SOURCE_BRANCH_NAME != $CI_COMMIT_BRANCH
deploy-pages-MR:
  stage: deploy
  needs: 
    - job: build-pages
      artifacts: True
  inherit:
    default: false
  environment:
    name: pages/$CI_MERGE_REQUEST_SOURCE_BRANCH_NAME
    url: "https://loosolab.pages.gwdg.de/-/software/sc_framework/-/jobs/$CI_JOB_ID/artifacts/docs/build/html/index.html"
  artifacts:
    paths:
      - docs/build/html/
  script: 
    - ls -l docs/
    - echo "deploy"
  artifacts:
    paths:
      - docs/build/html/
  rules:
    - if: $CI_PIPELINE_SOURCE == "merge_request_event" && $CI_MERGE_REQUEST_SOURCE_BRANCH_NAME != "dev" && $CI_MERGE_REQUEST_SOURCE_BRANCH_NAME != "main" # dev/main are built automatically
      allow_failure: True

# Deploy pages for a commit without a MR
deploy-pages-commit:
  stage: deploy
  needs:
    - job: build-pages
      artifacts: True
  inherit:
    default: false
  environment:
    name: pages/$CI_COMMIT_BRANCH
    url: "https://loosolab.pages.gwdg.de/-/software/sc_framework/-/jobs/$CI_JOB_ID/artifacts/docs/build/html/index.html"
  script:
    - ls -l docs/
    - echo "deploy" #mv docs/build/html/ public/
  artifacts:
    paths:
      - docs/build/html/
  rules:
    - if: $CI_PIPELINE_SOURCE != "merge_request_event"
      allow_failure: True

# Deploy documentation to public pages if it was the main branch
pages:
  stage: deploy
  needs:
    - job: build-pages
      artifacts: True
  inherit:
    default: false
  script:
    - mv docs/build/html/ public/
  artifacts:
    paths:
      - public
  rules:
    - if: $CI_COMMIT_BRANCH == "main" # after accepted MR to main
      allow_failure: False  # main not allowed to fail
